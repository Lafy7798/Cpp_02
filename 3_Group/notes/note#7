**템플릿과 표준 탬플릿 라이브러리**

일반화와 템플릿
제네릭 또는 일반화
: 함수나 클래스를 일반화시키고, 매개변수 타입을 지정하여 틀에서 찍어 내듯이 함수나 클래스 코드를 생산하는 기법
 
템플릿 
* 함수나 클래스를 일반화하는 c++도구
*template 키워드로 함수나 클래스 선언 

구체화
*템플릿의 제네릭 타입에 구체적인 타입 지정

구체화 오류 
*제네릭 타입에 구체적인 타입 지정 시 주의 

템플릿 장점 
*함수 코드의 재사용 

템플릿 단점 
*포팅에 취약
*컴파일 오류 메시지 빈약, 디버깅에 많은 어려움

**********페어 활동 *****************
표준 템플릿을 사용하면 좋은 이유에 대해서 서로 이야기를 해봤다.
먼저 페어는 표준 템플릿을 사용하면 우리가 직접 구현해야하는 수고를 줄이고
이미 만들어져 있는 것을 사용하는 것이기 때문에 코드가 간소화되고 재사용하는데
유용할 것이라고 말을 했다. 나도 동의를 했으나 단점으로 생각이 든것은
생각해보고 직접 구현을 했을 때 실력이 늘 수 있는 기회가 있는데
이것을 경험하지 못할 수도 있다고 생각을 했으나,
이 부분에 대해서 혼자 해결을 해본후에 템플릿을 사용하면 
더 유용하게 사용할 수 있다고 생각을 했다.
결론적으로는 사용했을 때 얻을 수 있는 유익이 더욱 많다고 결론을 지었다
*************************************************** 



<STL>
표준 템플릿 라이브러리 
-C++ 표준 라이브러리 중 하나

STL의 구성 
*컨테이너 - 템플릿 클래스
-데이터를 담아두는 자료 구조를 표현한 클래스
- 리스트 , 큐,스택,맵,셋,벡터

*iterator - 컨테이너 원소에 대한 포인터
-컨테이너의 원소들을 순회하면서 접근하기 위해 만들어진 컨테이너 원소에 대한 포인터
*알고리즘 - 템플릿 함수  
-컨테이너 원소에 대한 복사, 검색, 삭제 , 정렬 등의 기능을 구현한 템플릿 
-컨테이너의 멤버 변수 아님

vector 컨테이너
-가변 길이 배열을 구현한 제네릭 클래스 
-원소의 저장,삭제,검색 등 다양한 멤버 함수 지원
- 벡터의 저장된 원소는 인덱스로 접근 가능 

iterator 
-반복자라고도 부름
-컨테이너의 원소를 가리키는 포인터
iterator
-구체적인 컨테이너를 지정하여 반복자 변수 생성

map 컨테이너
-('키' , '값')의 쌍을 원소로 저장하는 제네릭 컨테이너
-'키'로 '값' 검색
-많은 응용에서 필요함


STL 알고리즘 
-템플릿 함수
-전역 함수
-iterator와 함께 작동

sort() 함수 사례
*두 개의 매개 변수

auto
*기능 
- c++ 11부터 컴파일러에게 변수선언문에서 추론하여 타입을 자동 선언하도록 지시

*장점
-복잡한 변수 선언을 간소하게 , 긴 타입 선언 시 발생할 수 있는 오타를 줄일 수 있다.

